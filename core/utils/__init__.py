""".. include:: README.md

Miscellaneous functions used throughout the project.
"""

import ast
import json
from typing import Any

import Levenshtein


def parse_json(file_path: str) -> dict:
    """Read json file and raise error if not found"""
    try:
        with open(file_path, encoding="utf-8") as f:
            return json.load(f)["tools"]
    except Exception as exc:
        msg = (
            "Could not parse json. Please use the right format."
            f"Received: {file_path} could not be parsed into a python dict."
            f"Make sure strings are wrapped in quotes for both keys and values."
        )
        raise ValueError(msg) from exc


def read_tooled_response(llm_response: Any) -> dict:
    """Read llm responses (when using tools) as dict and raise error if not found"""
    try:
        arguments = ast.literal_eval(llm_response.arguments)
        function_name = llm_response.name
    except Exception as exc:
        msg = (
            "Could not parse return json. Please use the right format."
            f"Received: {llm_response.arguments} could not be parsed into a python dict."
            f"Make sure strings are wrapped in quotes for both keys and values."
        )
        raise ValueError(msg) from exc
    return {"function_name": function_name, "arguments": arguments}


def are_similar(str1: str, str2: str, threshold: float = 0.9) -> bool:
    """Check if two strings are similar using Levenshtein distance."""
    str1 = str1.lower().replace(" ", "").replace("_", "")
    str2 = str2.lower().replace(" ", "").replace("_", "")
    distance = Levenshtein.distance(str1, str2)
    length = max(len(str1), len(str2))
    similarity_ratio = 1.0 - (distance / length)
    return similarity_ratio >= threshold


def find_closest_str(str1: str, str_list: list[str]) -> str:
    """Find the closest string in a list of strings to a given string."""
    return min(str_list, key=lambda x: Levenshtein.distance(str1, x))


def clean_columns_names(requested_cols: list[str], available_cols: list[str]) -> list[str]:
    """Clean columns names requested from a pandas dataframe.

    This is usefull when accessing pandas dataframes columns from a string generated by
    an LLM, which may contain typos. Uses Levenshtein distance with a high threshold.

    Rules:
        If a requested column matches a column in the dataframe, it will be kept.
        If it closely matches, it will be renamed using the real column name.
        If it does not match, it will be dropped from the request list.
    """
    if isinstance(requested_cols, str):
        requested_cols = [requested_cols]
    if isinstance(available_cols, str):
        available_cols = [available_cols]
    true_cols = []
    for col in requested_cols:
        for available_col in available_cols:
            if are_similar(col, available_col, threshold=0.95):
                true_cols.append(available_col)
                break
    return true_cols


if __name__ == "__main__":
    print(are_similar("hello", "hello_"))  # noqa: T201
    target = "Table Price"
    list_of_str = ["table_price", "table_costs", "table_currency"]
    print(find_closest_str(target, list_of_str))  # noqa: T201
